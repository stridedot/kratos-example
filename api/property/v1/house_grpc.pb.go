// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: property/v1/house.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HouseSvc_CreateHouse_FullMethodName        = "/api.property.v1.HouseSvc/CreateHouse"
	HouseSvc_UpdateHouse_FullMethodName        = "/api.property.v1.HouseSvc/UpdateHouse"
	HouseSvc_DeleteHouse_FullMethodName        = "/api.property.v1.HouseSvc/DeleteHouse"
	HouseSvc_GetHouse_FullMethodName           = "/api.property.v1.HouseSvc/GetHouse"
	HouseSvc_PaginatedListHouse_FullMethodName = "/api.property.v1.HouseSvc/PaginatedListHouse"
)

// HouseSvcClient is the client API for HouseSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseSvcClient interface {
	CreateHouse(ctx context.Context, in *CreateHouseRequest, opts ...grpc.CallOption) (*CreateHouseReply, error)
	UpdateHouse(ctx context.Context, in *UpdateHouseRequest, opts ...grpc.CallOption) (*UpdateHouseReply, error)
	DeleteHouse(ctx context.Context, in *DeleteHouseRequest, opts ...grpc.CallOption) (*DeleteHouseReply, error)
	GetHouse(ctx context.Context, in *GetHouseRequest, opts ...grpc.CallOption) (*GetHouseReply, error)
	PaginatedListHouse(ctx context.Context, in *PagintatedListHouseRequest, opts ...grpc.CallOption) (*PaginatedListListHouseReply, error)
}

type houseSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseSvcClient(cc grpc.ClientConnInterface) HouseSvcClient {
	return &houseSvcClient{cc}
}

func (c *houseSvcClient) CreateHouse(ctx context.Context, in *CreateHouseRequest, opts ...grpc.CallOption) (*CreateHouseReply, error) {
	out := new(CreateHouseReply)
	err := c.cc.Invoke(ctx, HouseSvc_CreateHouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseSvcClient) UpdateHouse(ctx context.Context, in *UpdateHouseRequest, opts ...grpc.CallOption) (*UpdateHouseReply, error) {
	out := new(UpdateHouseReply)
	err := c.cc.Invoke(ctx, HouseSvc_UpdateHouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseSvcClient) DeleteHouse(ctx context.Context, in *DeleteHouseRequest, opts ...grpc.CallOption) (*DeleteHouseReply, error) {
	out := new(DeleteHouseReply)
	err := c.cc.Invoke(ctx, HouseSvc_DeleteHouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseSvcClient) GetHouse(ctx context.Context, in *GetHouseRequest, opts ...grpc.CallOption) (*GetHouseReply, error) {
	out := new(GetHouseReply)
	err := c.cc.Invoke(ctx, HouseSvc_GetHouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *houseSvcClient) PaginatedListHouse(ctx context.Context, in *PagintatedListHouseRequest, opts ...grpc.CallOption) (*PaginatedListListHouseReply, error) {
	out := new(PaginatedListListHouseReply)
	err := c.cc.Invoke(ctx, HouseSvc_PaginatedListHouse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseSvcServer is the server API for HouseSvc service.
// All implementations must embed UnimplementedHouseSvcServer
// for forward compatibility
type HouseSvcServer interface {
	CreateHouse(context.Context, *CreateHouseRequest) (*CreateHouseReply, error)
	UpdateHouse(context.Context, *UpdateHouseRequest) (*UpdateHouseReply, error)
	DeleteHouse(context.Context, *DeleteHouseRequest) (*DeleteHouseReply, error)
	GetHouse(context.Context, *GetHouseRequest) (*GetHouseReply, error)
	PaginatedListHouse(context.Context, *PagintatedListHouseRequest) (*PaginatedListListHouseReply, error)
	mustEmbedUnimplementedHouseSvcServer()
}

// UnimplementedHouseSvcServer must be embedded to have forward compatible implementations.
type UnimplementedHouseSvcServer struct {
}

func (UnimplementedHouseSvcServer) CreateHouse(context.Context, *CreateHouseRequest) (*CreateHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHouse not implemented")
}
func (UnimplementedHouseSvcServer) UpdateHouse(context.Context, *UpdateHouseRequest) (*UpdateHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHouse not implemented")
}
func (UnimplementedHouseSvcServer) DeleteHouse(context.Context, *DeleteHouseRequest) (*DeleteHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHouse not implemented")
}
func (UnimplementedHouseSvcServer) GetHouse(context.Context, *GetHouseRequest) (*GetHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouse not implemented")
}
func (UnimplementedHouseSvcServer) PaginatedListHouse(context.Context, *PagintatedListHouseRequest) (*PaginatedListListHouseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginatedListHouse not implemented")
}
func (UnimplementedHouseSvcServer) mustEmbedUnimplementedHouseSvcServer() {}

// UnsafeHouseSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseSvcServer will
// result in compilation errors.
type UnsafeHouseSvcServer interface {
	mustEmbedUnimplementedHouseSvcServer()
}

func RegisterHouseSvcServer(s grpc.ServiceRegistrar, srv HouseSvcServer) {
	s.RegisterService(&HouseSvc_ServiceDesc, srv)
}

func _HouseSvc_CreateHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseSvcServer).CreateHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseSvc_CreateHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseSvcServer).CreateHouse(ctx, req.(*CreateHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseSvc_UpdateHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseSvcServer).UpdateHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseSvc_UpdateHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseSvcServer).UpdateHouse(ctx, req.(*UpdateHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseSvc_DeleteHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseSvcServer).DeleteHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseSvc_DeleteHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseSvcServer).DeleteHouse(ctx, req.(*DeleteHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseSvc_GetHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseSvcServer).GetHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseSvc_GetHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseSvcServer).GetHouse(ctx, req.(*GetHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseSvc_PaginatedListHouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagintatedListHouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseSvcServer).PaginatedListHouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseSvc_PaginatedListHouse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseSvcServer).PaginatedListHouse(ctx, req.(*PagintatedListHouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HouseSvc_ServiceDesc is the grpc.ServiceDesc for HouseSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HouseSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.property.v1.HouseSvc",
	HandlerType: (*HouseSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHouse",
			Handler:    _HouseSvc_CreateHouse_Handler,
		},
		{
			MethodName: "UpdateHouse",
			Handler:    _HouseSvc_UpdateHouse_Handler,
		},
		{
			MethodName: "DeleteHouse",
			Handler:    _HouseSvc_DeleteHouse_Handler,
		},
		{
			MethodName: "GetHouse",
			Handler:    _HouseSvc_GetHouse_Handler,
		},
		{
			MethodName: "PaginatedListHouse",
			Handler:    _HouseSvc_PaginatedListHouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "property/v1/house.proto",
}
